@using ProjectManagementSystem.Models
@using ProjectManagementSystem.ViewModels
@model ProjectManagementSystem.Models.Project

@{ ViewData["Title"] = $"Edit {@Model.Name}"; }

<h1>@Model.Name</h1>

<div class="k-content">
    <form id="projectForm" asp-action="Edit">
        <div id="tabStrip">
            <ul>
                <li class="k-state-active">
                    General Information
                </li>
                <li>
                    Team Members
                </li>
                <li>
                    Risks
                </li>
                <li>
                    Requirements
                </li>
                <li>
                    Monitoring And Tracking
                </li>
            </ul>
            <div id="generalInformationTab">
                <ul id="fieldlist">
                    <li>
                        <label asp-for="Name"></label>
                        <input asp-for="Name" class="k-textbox" />
                    </li>
                    <li>
                        <label asp-for="OwnerName"></label>
                        <input asp-for="OwnerName" class="k-textbox" />
                    </li>
                    <li>
                        <label asp-for="Description"></label>
                        @Html.TextAreaFor(m => m.Description, new { id = "editProjectDescription", @class = "k-textbox", style = "height:100px; width: 100%;" })
                    </li>
                    <li class="actions">
                        <button type="submit" data-role="button" data-icon="check">Update Project</button> |
                        <a asp-action="Index" class="k-button"><span class="k-icon k-i-undo"></span>Back to List</a>
                    </li>
                </ul>
            </div>
            <div>
                @(Html.Kendo().Grid<TeamMemberViewModel>()
                    .Name("teamMemberGrid")
                    .Columns(columns =>
                    {
                        columns.Bound(teamMember => teamMember.FirstName);
                        columns.Bound(teamMember => teamMember.LastName);
                        columns.Command(command => { command.Destroy(); }).Width(150);
                    })
                    .ToolBar(toolbar =>
                    {
                        toolbar.Create().Text("Add New Team Member");
                        toolbar.Save();
                    })
                    .Editable(editable => editable.Mode(GridEditMode.InCell))
                    .Navigatable()
                    .Sortable()
                    .Scrollable()
                    .Pageable(pageable => pageable
                        .Input(true)
                        .Numeric(false))
                    .DataSource(dataSource => dataSource
                        .Ajax()
                        .Events((builder) =>
                        {
                            builder.Sync("teamdatasource_change");
                        })
                        .Batch(true)
                        .PageSize(10)
                        .ServerOperation(false)
                        .Model(model => model.Id(teamMember => teamMember.Id))
                        .Read(read =>
                        {
                            read.Type(HttpVerbs.Get);
                            read.Action("Grid_Read", "TeamMembers", new { IdProject = Model.Id });
                        })
                        .Create(create =>
                        {
                            create.Type(HttpVerbs.Post);
                            create.Action("Grid_Create", "TeamMembers", new { IdProject = Model.Id });
                        })
                        .Update(update =>
                        {
                            update.Type(HttpVerbs.Put);
                            update.Action("Grid_Update", "TeamMembers", new { IdProject = Model.Id });
                        })
                        .Destroy(destroy =>
                        {
                            destroy.Type(HttpVerbs.Delete);
                            destroy.Action("Grid_Destroy", "TeamMembers", new { IdProject = Model.Id });
                        })))
            </div>
            <div>
                @(Html.Kendo().Grid<Risk>()
                    .Name("riskGrid")
                    .Columns(columns =>
                    {
                        columns.Bound(risk => risk.RiskName);
                        columns.Bound(risk => risk.RiskStatus);
                        columns.Command(command => { command.Destroy(); }).Width(150);
                    })
                    .ToolBar(toolbar =>
                    {
                        toolbar.Create().Text("Add New Risk");
                        toolbar.Save();
                    })
                    .Editable(editable => editable.Mode(GridEditMode.InCell))
                    .Navigatable()
                    .Sortable()
                    .Scrollable()
                    .Pageable(pageable => pageable
                        .Input(true)
                        .Numeric(false))
                    .DataSource(dataSource => dataSource
                        .Ajax()
                        .Events((builder) =>
                        {
                            builder.Sync("datasource_change");
                        })
                        .Batch(true)
                        .PageSize(10)
                        .ServerOperation(false)
                        .Model(model => model.Id(risk => risk.Id))
                        .Read(read =>
                        {
                            read.Type(HttpVerbs.Get);
                            read.Action("Grid_Read", "Risks", new { IdProject = Model.Id });
                        })
                        .Create(create =>
                        {
                            create.Type(HttpVerbs.Post);
                            create.Action("Grid_Create", "Risks", new { IdProject = Model.Id });
                        })
                        .Update(update =>
                        {
                            update.Type(HttpVerbs.Put);
                            update.Action("Grid_Update", "Risks", new { IdProject = Model.Id });
                        })
                        .Destroy(destroy =>
                        {
                            destroy.Type(HttpVerbs.Delete);
                            destroy.Action("Grid_Destroy", "Risks", new { IdProject = Model.Id });
                        })))
            </div>
            <div>
                @(Html.Kendo().Grid<RequirementViewModel>()
                    .Name("requirementGrid")
                    .Columns(columns =>
                    {
                        columns.Bound(p => p.RequirementName);
                        columns.Bound(p => p.Description);
                        columns.Bound(p => p.RequirementType).ClientTemplate("#=RequirementType.DisplayName#");
                        columns.Command(command =>
                        {
                            command.Destroy();
                        }).Width(100);
                    })
                    .ToolBar(toolbar =>
                    {
                        toolbar.Create().Text("Add New Requirement");
                        toolbar.Save();
                    })
                    .Editable(editable => editable.Mode(GridEditMode.InCell))
                    .Navigatable()
                    .Pageable(pageable => pageable
                        .Input(true)
                        .Numeric(false))
                    .Sortable()
                    .Scrollable()
                    .DataSource(dataSource =>
                    {
                        dataSource.Ajax()
                            .Events((builder) =>
                            {
                                builder.Sync("requirementdatasource_change");
                            })
                            .Batch(true)
                            .PageSize(10)
                            .ServerOperation(false)
                            .Model(model =>
                            {
                                model.Id(p => p.Id);
                                model.Field(p => p.RequirementType).DefaultValue(ViewData["defaultRequirementType"] as RequirementType);
                            })
                            .Read(read =>
                            {
                                read.Type(HttpVerbs.Get);
                                read.Action("Grid_Read", "Requirements", new { IdProject = Model.Id });
                            })
                            .Create(create =>
                            {
                                create.Type(HttpVerbs.Post);
                                create.Action("Grid_Create", "Requirements", new { IdProject = Model.Id });
                            })
                            .Update(update =>
                            {
                                update.Type(HttpVerbs.Put);
                                update.Action("Grid_Update", "Requirements", new { IdProject = Model.Id });
                            })
                            .Destroy(destroy =>
                            {
                                destroy.Type(HttpVerbs.Delete);
                                destroy.Action("Grid_Destroy", "Requirements", new { IdProject = Model.Id });
                            });
                    }))
            </div>
            <div>
                <div id="effortButtonBox">
                    <button id="addRequirmentEffortButton" type="button" data-role="button" data-icon="plus">Add Effort</button> | 
                    @(Html.Kendo().Button()
                        .Name("viewProjectAnalysisButton")
                        .HtmlAttributes(new { type = "button" }).IconClass("k-icon k-i-graph")
                        .Content("Analyze Project Status"))
                </div>

                @(Html.Kendo().Grid<RequirementEffortViewModel>()
                    .Name("requirementEffortGrid")
                    .Columns(columns =>
                    {
                        columns.Bound(p => p.Requirement.RequirementName);
                        columns.Bound(p => p.RequirementEffortType.DisplayName);
                        columns.Bound(p => p.TeamMember.FullName).Title("Team Member");
                        columns.Bound(p => p.TimeFrame.DisplayName);
                        columns.Bound(p => p.DateFrom).ClientTemplate("#= kendo.toString(DateFrom, 'MM/dd/yyyy') #");
                        columns.Bound(p => p.DateTo).ClientTemplate("#= kendo.toString(DateTo, 'MM/dd/yyyy') #");
                        columns.Bound(p => p.TimeExpended);
                        columns.Command(command =>
                        {
                            command.Custom("Edit").IconClass("k-icon k-i-edit").Click("EditRequirementEffort");
                        }).Width(100);
                        columns.Command(command =>
                        {
                            command.Destroy();
                        }).Width(100);
                    })
                    .Navigatable()
                    .Pageable(pageable => pageable
                        .Input(true)
                        .Numeric(false))
                    .Sortable()
                    .Scrollable()
                    .DataSource(dataSource =>
                    {
                        dataSource.Ajax()
                            .Events((builder) =>
                            {
                                builder.Sync("datasource_change");
                            })
                            .Batch(false)
                            .AutoSync(true)
                            .PageSize(10)
                            .ServerOperation(false)
                            .Model(model =>
                            {
                                model.Id(p => p.Id);
                                model.Field(p => p.RequirementEffort);
                                model.Field(p => p.Requirement);
                                model.Field(p => p.RequirementEffortType);
                                model.Field(p => p.TeamMember);
                                model.Field(p => p.TimeFrame);
                            })
                            .Read(read =>
                            {
                                read.Type(HttpVerbs.Get);
                                read.Action("Grid_Read", "RequirementEfforts", new {IdProject = Model.Id});
                            })
                            .Destroy(destroy =>
                            {
                                destroy.Type(HttpVerbs.Delete);
                                destroy.Action("Grid_Destroy", "RequirementEfforts", new { IdProject = Model.Id });
                            });

                    }))
            </div>
        </div>
    </form>
</div>

<div style="display: none">
    @(Html.Kendo().Window()
        .Name("addRequirmentEffortWindow")
        .Title("Add Effort")
        .Modal(true)
        .Visible(false)
        .Content("loading...")
        .Resizable()
        .Draggable()
        .MinHeight(320)
        .MinWidth(500)
        .LoadContentFrom("CreatePopUp", "RequirementEfforts", new { IdProject = Model.Id })
        .Events(e =>
        {
            e.Close("addRequirmentEffortWindowClose");
        })
        .Actions(actions => actions
            .Maximize()
            .Close())
        )
</div>

<div style="display: none">
    @(Html.Kendo().Window()
        .Name("editRequirementEffortWindow")
        .Title("Edit Effort")
        .Modal(true)
        .Visible(false)
        .Content("loading...")
        .Resizable()
        .Draggable()
        .MinHeight(400)
        .MinWidth(500)
        .Events(e =>
        {
            e.Close("editRequirementEffortWindowClose");
        })
        .Actions(actions => actions
            .Maximize()
            .Close())
        )
</div>

<div style="display: none">
    @(Html.Kendo().Window()
        .Name("viewProjectAnalysisWindow")
        .Title($"{@Model.Name} Status")
        .Modal(true)
        .Visible(false)
        .Content("loading...")
        .Resizable()
        .Draggable()
        .LoadContentFrom("ProjectStatusPopUp", "Projects", new { IdProject = Model.Id })
        .Actions(actions => actions
            .Close())
        )
</div>

<script>
    $(document).ready(function () {

        var container = $("#projectForm");
        kendo.init(container);

        $("#projectForm").kendoValidator({
            // You can define your custom rules here:
            //rules: {}

        });

        $("#tabStrip").kendoTabStrip({
            animation: {
                open: {
                    effects: "fadeIn"
                }
            }
        });

        $("#addRequirmentEffortButton").bind("click",
            function () {
                $("#addRequirmentEffortWindow").data("kendoWindow").refresh();
                $("#addRequirmentEffortWindow").data("kendoWindow").center().open();
            });

        $("#viewProjectAnalysisButton").bind("click",
            function () {
                $("#viewProjectAnalysisWindow").data("kendoWindow").refresh();
                $("#viewProjectAnalysisWindow").data("kendoWindow").maximize().open();
            });

    });

    function datasource_change(e) {
        this.read();
    }

    function requirementdatasource_change(e) {
        this.read();
        $("#requirementEffortGrid").data("kendoGrid").dataSource.read();
    }

    function teamdatasource_change(e) {
        this.read();
        $("#requirementEffortGrid").data("kendoGrid").dataSource.read();
    }

    function addRequirmentEffortWindowClose() {
        $("#createPopUpDateTo").data("kendoDatePicker").enable(false);
        $("#requirementEffortGrid").data("kendoGrid").dataSource.read();
    }

    function createOnSelect(e) {
        if (e.sender.dataItem(e.item)[e.sender.options.dataTextField] == e.sender.options.optionLabel) {
            $("#createPopUpDateFrom").data("kendoDatePicker").enable(false);
            $("#createPopUpDateFrom").data("kendoDatePicker").value(null);
            createPopUpDateFromChange();
        } else {
            $("#createPopUpDateFrom").data("kendoDatePicker").enable(true);
            createPopUpDateFromChange();
        }
    }

    function createPopUpDateFromChange() {
        var dateFrom = $("#createPopUpDateFrom").data("kendoDatePicker").value();
        var timeFrame = $("#createPopUpTimeFrame").data("kendoDropDownList").text();
        var dateToPicker = $("#createPopUpDateTo").data("kendoDatePicker");

        if (dateFrom) {
            if (timeFrame == "Daily") {
                dateToPicker.value(dateFrom);
            } else if (timeFrame == "Weekly") {
                var dateTo = new Date(dateFrom);
                dateTo.setDate(dateTo.getDate() + 7);
                dateToPicker.value(dateTo);
            }
        }
        else {
            dateToPicker.value(null);
        }
    }

    function EditRequirementEffort(e) {
        e.preventDefault();

        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        $("#editRequirementEffortWindow").data("kendoWindow").refresh({
            url: "/RequirementEfforts/EditPopUp/",
            data: { IdProject: @Model.Id, IdRequirementEffort: dataItem.Id }
        });
        $("#editRequirementEffortWindow").data("kendoWindow").center().open();
    }

    function editRequirementEffortWindowClose() {
        $("#editPopUpDateTo").data("kendoDatePicker").enable(false);
        $("#requirementEffortGrid").data("kendoGrid").dataSource.read();
    }

    function editOnSelect(e) {
        if (e.sender.dataItem(e.item)[e.sender.options.dataTextField] == e.sender.options.optionLabel) {
            $("#editPopUpDateFrom").data("kendoDatePicker").enable(false);
            $("#editPopUpDateFrom").data("kendoDatePicker").value(null);
            editPopUpDateFromChange();
        } else {
            $("#editPopUpDateFrom").data("kendoDatePicker").enable(true);
            editPopUpDateFromChange();
        }
    }

    function editPopUpDateFromChange() {
        var dateFrom = $("#editPopUpDateFrom").data("kendoDatePicker").value();
        var timeFrame = $("#editPopUpTimeFrame").data("kendoDropDownList").text();
        var dateToPicker = $("#editPopUpDateTo").data("kendoDatePicker");

        if (dateFrom) {
            if (timeFrame == "Daily") {
                dateToPicker.value(dateFrom);
            } else if (timeFrame == "Weekly") {
                var dateTo = new Date(dateFrom);
                dateTo.setDate(dateTo.getDate() + 7);
                dateToPicker.value(dateTo);
            }
        }
        else {
            dateToPicker.value(null);
        }
    }

</script>

<style>

    #fieldlist {
        margin: 0 0 -2em;
        padding: 0;
    }

    #fieldlist li {
        list-style: none;
        padding-bottom: 1em;
    }

    #fieldlist label {
        display: block;
        font-weight: bold;
    }

    #tabStrip > .k-content {
        overflow: visible;
    }

    #fieldlist input {
        width: 100%;
    }

    #generalInformationTab {
        padding-bottom: 35px
    }

    #effortButtonBox {
        padding-bottom: 10px
    }

    .k-grid  .k-grid-header  .k-header  .k-link {
        height: auto;
    }
  
    .k-grid  .k-grid-header  .k-header {
        white-space: normal;
    }

    .k-i-edit{
        margin-right: .2em;
    }

    .k-i-undo{
        margin-right: .3em;
    }

</style>
